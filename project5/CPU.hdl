// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Check the type of instruction
    Not(in=instruction[15], out=Atype);
    
    // A Register logic
    // Load A if: A-instruction OR (C-instruction AND d1=1)
    And(a=instruction[15], b=instruction[5], out=CandLoadA);
    Or(a=Atype, b=CandLoadA, out=loadA);
    
    // Input to A register: instruction value for A-type, ALU output for C-type
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=Ain);
    ARegister(in=Ain, load=loadA, out=Aout, out[0..14]=addressM);
    
    // D Register logic
    // Load D only if C-instruction AND d2=1
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=Dout);
    
    // ALU input selection
    // Second input: A register or M based on 'a' bit
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AorM);
    
    // ALU
    ALU(x=Dout, y=AorM, 
        zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], 
        f=instruction[7], no=instruction[6], 
        out=aluOut, out=outM, zr=zr, ng=ng);
    
    // WriteM logic
    // Write to M only if C-instruction AND d3=1
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    // Jump logic
    // Extract jump bits
    And(a=instruction[15], b=instruction[2], out=j1);  // JLT
    And(a=instruction[15], b=instruction[1], out=j2);  // JEQ  
    And(a=instruction[15], b=instruction[0], out=j3);  // JGT
    
    // Compute conditions
    Not(in=zr, out=notZero);
    Not(in=ng, out=positive);
    And(a=notZero, b=positive, out=greater);  // > 0
    
    // Jump conditions
    And(a=j1, b=ng, out=jumpLT);       // JLT: jump if < 0
    And(a=j2, b=zr, out=jumpEQ);       // JEQ: jump if = 0  
    And(a=j3, b=greater, out=jumpGT);  // JGT: jump if > 0
    
    // Combine jump conditions
    Or(a=jumpLT, b=jumpEQ, out=jump1);
    Or(a=jump1, b=jumpGT, out=jump);
    
    // PC logic
    Not(in=jump, out=inc);
    PC(in=Aout, load=jump, inc=inc, reset=reset, out[0..14]=pc);
}